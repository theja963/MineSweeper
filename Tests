import pytest
import torch
import numpy as np
from alphaZero import cnn, run_mcts, trainer
from minesweeperGenerator import userAction

# -------------------------
# UNIT TESTS
# -------------------------

def test_cnn_forward():
    model = cnn(board_size=4)
    dummy_input = torch.randn(1, 3, 4, 4)  # 3 channels: board, revealed, flagged
    policy, value = model(dummy_input)
    assert policy.shape == (1, 16), "Policy output shape mismatch"
    assert value.shape == (1, 1), "Value output shape mismatch"
    assert torch.isclose(value, value.clamp(-1, 1)).all(), "Value out of range [-1,1]"

def test_run_mcts_output():
    env = userAction(map_size=4)
    env.generate_map()
    action_probs, value = run_mcts(env)
    assert isinstance(action_probs, torch.Tensor), "Output should be a tensor"
    assert len(action_probs) == 16, "Expected action space = board_sizeÂ²"
    assert abs(action_probs.sum().item() - 1.0) < 1e-3, "Probabilities should sum to 1"

def test_trainer_train_step():
    model = cnn(board_size=4)
    env = userAction(map_size=4)
    test_trainer = trainer(model, env)

    # Add dummy data to replay buffer
    dummy_obs = np.random.rand(3, 4, 4).astype(np.float32)
    dummy_pi = np.ones(16) / 16
    dummy_value = 0.5
    test_trainer.replay.append((dummy_obs, dummy_pi, dummy_value))

    prev_weights = [param.clone() for param in model.parameters()]
    test_trainer.train(batch_size=1)
    new_weights = list(model.parameters())

    # Ensure at least one parameter was updated
    assert any(not torch.equal(p1, p2) for p1, p2 in zip(prev_weights, new_weights)), "Model weights were not updated"

# -------------------------
# INTEGRATION TEST
# -------------------------

def test_training_cycle_runs():
    model = cnn(board_size=4)
    test_trainer = trainer(model, userAction)
    test_trainer.self_play(n_games=2)
    test_trainer.train(batch_size=2)

    assert len(test_trainer.replay) > 0, "Replay buffer should not be empty"
    assert test_trainer.wins >= 0, "Wins count should be non-negative"
